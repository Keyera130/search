Answer questions marked as "QS"

QS1.1:
I use a stack for DFS. It works by keeping track of the most recent state explored 
and follows the Last In, First Out (LIFO) approach, which is perfect for exploring
 as deep as possible along one path before backtracking. It's efficient for this 
 kind of recursive search pattern.

QS1.2:
Yeah, the exploration order makes sense—Pacman goes as deep as it can before 
backtracking. You’ll notice that not all explored squares are part of the final 
path since DFS doesn't always find the shortest path. It just explores all 
possible paths until it hits the goal.


QS2.1:
I use a queue for BFS because it works in a First In, First Out (FIFO) way. 
This helps explore all nodes at one depth level before moving deeper, which 
guarantees finding the shortest path.


QS3.1:
The cost function is super simple—it just assigns a step cost of 1 for every 
move Pacman makes, whether it’s going up, down, left, or right. There’s no 
fancy weighting for obstacles or anything; it’s just basic and straightforward.


QS4.1:
The nullHeuristic is kinda like saying, "I have no clue," since it always returns 
0, which makes the algorithm behave like plain UCS (Uniform Cost Search). On the 
other hand, the Manhattan heuristic gives Pacman a sense of direction by 
calculating how far away the goal is in straight lines along the grid. The 
Manhattan heuristic is better because it makes the search way faster and more 
efficient by guiding Pacman toward the goal.



QS4.2:
DFS just dives as deep as it can, often getting lost and visiting way more nodes 
than needed.
BFS explores level by level and guarantees the shortest path but can expand a 
ton of nodes if the maze is big.
A* with Manhattan heuristic wins because it focuses directly on the goal, 
expanding way fewer nodes than BFS while still getting the best path.

QS5.1:
I kept it simple: each state is a tuple with Pacman’s position and a frozenset 
of visited corners. Using frozenset makes it efficient to track which corners 
have been visited without worrying about the order.


QS5.2:
I tracked Pacman’s current position and visited corners. The getSuccessors method 
generates new states by moving Pacman around and updating the list of visited 
corners. The isGoalState method checks if Pacman has hit all four corners. Using 
frozenset makes comparisons faster when checking which corners are visited.

QS6.1:
I used the Manhattan distance to the farthest unvisited corner.
Strong points: It’s simple, consistent, and admissible, so it guarantees optimal 
solutions.
Weak points: It doesn’t account for walls, so sometimes it overestimates the cost. 
But overall, it works pretty well and respects the triangle inequality, making 
it consistent.

QS7.1:
I used a version of the Manhattan distance heuristic that looks at the farthest food 
item.
Strong points: It’s consistent, admissible, and simple enough to guide Pacman 
efficiently without breaking things.
Weak points: It doesn’t consider walls or obstacles, which can lead to inefficient 
paths. But it’s consistent since it never overestimates and follows the triangle rule.


QS8.1 
My solution for the FoodSearchProblem uses A* with a distance-based heuristic.
Strong points: A* finds the best path while keeping the search efficient, and the 
heuristic makes Pacman smarter about where to go next.
Weak points: The heuristic doesn’t care about walls, so sometimes Pacman makes 
weird moves. For super complex mazes, it might still expand more nodes than I’d 
like, but it gets the job done.